using System;
using System.Data;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

namespace Manager
{
    public partial class checkout : Form
    {
        cashier cash;
        MySqlConnection conn = koneksi.getConn();
        decimal diskon = 0;
        decimal diskonpromo, diskonmember;
        string name;
        int idpegawai;
        List<Tuple<int, decimal>> finalDiscounts;
        List<Tuple<int, int>> productIds;
        public checkout(cashier cash, List<Tuple<int, int>> idProduk, string name, int idpegawai)
        {
            InitializeComponent();
            this.idpegawai = idpegawai;
            this.cash = cash;
            this.name = name;
            productIds = this.productIds;
            PopulateDataGridView(idProduk);
            ApplyPromo(idProduk);
            Updatesum();
            LoadPaymentMethods();
            //------------default-----------------
            buttondefault(btncheckout);
            buttondefault(btnedit);
        }

        //------------default ---------------
        private void buttondefault(Button temp)
        {
            temp.FlatStyle = FlatStyle.Flat;
            temp.FlatAppearance.BorderSize = 0;
        }

        private void LoadPaymentMethods()
        {
            string query = "SELECT id_metode, nama_pembayaran FROM pembayaran";


                try
                {

                    using (MySqlCommand command = new MySqlCommand(query, conn))
                    {
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            boxpembayaran.Items.Clear();

                            while (reader.Read())
                            {
                                string paymentName = reader["nama_pembayaran"].ToString();
                                boxpembayaran.Items.Add(paymentName);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error saat mengambil data metode pembayaran: " + ex.Message,
                        "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            
        }

        //------------properties action-----------------
        private void btnedit_Click(object sender, EventArgs e)
        {
            this.Hide();
            cash.Show();
        }

        //--------function-------------
        private void PopulateDataGridView(List<Tuple<int, int>> productIds)
        {

                string query = @"
        SELECT 
            p.id_produk,
            p.nama_produk,
            m.nama_merk,
            k.nama_kategori,
            p.harga
        FROM produk p
        JOIN merk m ON p.id_merk = m.id_merk
        JOIN kategori k ON p.kategori = k.id_kategori
        WHERE p.id_produk = @ProductId";

                DataTable dbProducts = new DataTable();

                dbProducts.Columns.Add("id_produk", typeof(int));
                dbProducts.Columns.Add("nama_produk", typeof(string));
                dbProducts.Columns.Add("nama_merk", typeof(string));
                dbProducts.Columns.Add("nama_kategori", typeof(string));
                dbProducts.Columns.Add("harga", typeof(decimal));
                dbProducts.Columns.Add("stok", typeof(int));
                dbProducts.Columns.Add("subtotal", typeof(decimal));

                foreach (var product in productIds)
                {
                    int idProduk = product.Item1;
                    int quantity = product.Item2;

                    using (MySqlCommand command = new MySqlCommand(query, conn))
                    {
                        command.Parameters.AddWithValue("@ProductId", idProduk);

                        try
                        {
                            using (MySqlDataReader reader = command.ExecuteReader())
                            {
                                if (reader.HasRows)
                                {
                                    while (reader.Read())
                                    {
                                        DataRow dr = dbProducts.NewRow();
                                        dr["id_produk"] = reader["id_produk"];
                                        dr["nama_produk"] = reader["nama_produk"];
                                        dr["nama_merk"] = reader["nama_merk"];
                                        dr["nama_kategori"] = reader["nama_kategori"];
                                        dr["harga"] = reader["harga"];
                                        dr["stok"] = quantity;
                                        dr["subtotal"] = quantity * Convert.ToDecimal(reader["harga"]);

                                        dbProducts.Rows.Add(dr);
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error saat mengambil data produk: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            dataGridView1.DataSource = dbProducts;
            finalDiscounts = CalculateFinalDiscounts(productIds, jenis_member);
            
        }
        int totalProducts = 0;
        int totalQuantity = 0;
        decimal grandtotal = 0;
        decimal totalPrice = 0;
        decimal pajak = 0;
        private void Updatesum()
        {
            totalProducts = 0;
            totalQuantity = 0;
            totalPrice = 0;

            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (!row.IsNewRow)
                {
                    totalProducts++;
                    int quantity = Convert.ToInt32(row.Cells["stok"].Value ?? 0);
                    decimal subtotal = Convert.ToDecimal(row.Cells["subtotal"].Value ?? 0);

                    totalQuantity += quantity;
                    totalPrice += subtotal;
                }
            }
            pajak = ((totalPrice - diskon) * 11) / 100;
            // Calculate grand total including tax and discounts
            grandtotal = totalPrice - diskon + pajak;

            totalproduk.Text = $"Total Products: {totalProducts}";
            totalquantity.Text = $"Total Quantity: {totalQuantity}";
            labelSubtotal.Text = $"Rp {totalPrice:N0}";
            labelPajak.Text = $"Rp {pajak:N0}";
            labelGrandtotal.Text = $"Rp {grandtotal:N0}";
        }

        int idHtrans;
        private void btncheckout_Click(object sender, EventArgs e)
        {
            if (boxpembayaran.SelectedIndex > -1)
            {
                string totalPriceText = labelGrandtotal.Text.Replace("Rp", "").Replace(",", "").Replace(" ", "").Trim();

                if (!decimal.TryParse(totalPriceText, out decimal grandtotal))
                {
                    MessageBox.Show(totalPriceText, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                try
                {
                    MySqlTransaction transaction = conn.BeginTransaction();

                    List<Tuple<int, int>> productIds = new List<Tuple<int, int>>();
                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        if (!row.IsNewRow)
                        {
                            int idProduk = Convert.ToInt32(row.Cells["id_produk"].Value);
                            int jumlah = Convert.ToInt32(row.Cells["stok"].Value);
                            productIds.Add(Tuple.Create(idProduk, jumlah));
                        }
                    }

                    // Calculate final discounts
                    

                    // Use the actual calculated values for the database
                    string htransQuery = @"
                INSERT INTO htrans (id_pegawai, tanggal_transaksi, subtotal, grandtotal, pajak, metode_pembayaran)
                VALUES (@idPegawai, @tanggalTransaksi, @subtotal, @grandtotal, @pajak, @metodePembayaran);
                SELECT LAST_INSERT_ID();";

                    MySqlCommand htransCommand = new MySqlCommand(htransQuery, conn, transaction);
                    htransCommand.Parameters.AddWithValue("@idPegawai", idpegawai);
                    htransCommand.Parameters.AddWithValue("@tanggalTransaksi", DateTime.Now);
                    htransCommand.Parameters.AddWithValue("@subtotal", totalPrice); // Original subtotal before discounts
                    htransCommand.Parameters.AddWithValue("@grandtotal", grandtotal); // Final total after discounts and tax
                    htransCommand.Parameters.AddWithValue("@pajak", pajak);
                    htransCommand.Parameters.AddWithValue("@metodePembayaran", boxpembayaran.SelectedIndex + 1);

                    idHtrans = Convert.ToInt32(htransCommand.ExecuteScalar());

                    string updateStockQuery = @"
                UPDATE produk 
                SET stok = stok - @jumlah 
                WHERE id_produk = @idProduk;";

                    string dtransQuery = @"
                INSERT INTO dtrans (id_htrans, id_produk, nama_produk, jumlah, subtotal, diskon)
                VALUES (@idHtrans, @idProduk, @namaProduk, @jumlah, @subtotal, @diskon);";

                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        if (!row.IsNewRow)
                        {
                            int idProduk = Convert.ToInt32(row.Cells["id_produk"].Value);
                            decimal diskon = finalDiscounts.FirstOrDefault(d => d.Item1 == idProduk)?.Item2 ?? 0;

                            MySqlCommand dtransCommand = new MySqlCommand(dtransQuery, conn, transaction);
                            dtransCommand.Parameters.AddWithValue("@idHtrans", idHtrans);
                            dtransCommand.Parameters.AddWithValue("@idProduk", idProduk);
                            dtransCommand.Parameters.AddWithValue("@namaProduk", row.Cells["nama_produk"].Value);
                            dtransCommand.Parameters.AddWithValue("@jumlah", row.Cells["stok"].Value);
                            dtransCommand.Parameters.AddWithValue("@subtotal", row.Cells["subtotal"].Value);
                            dtransCommand.Parameters.AddWithValue("@diskon", diskon);

                            dtransCommand.ExecuteNonQuery();

                            MySqlCommand updateStockCommand = new MySqlCommand(updateStockQuery, conn, transaction);
                            updateStockCommand.Parameters.AddWithValue("@jumlah", row.Cells["stok"].Value);
                            updateStockCommand.Parameters.AddWithValue("@idProduk", idProduk);

                            updateStockCommand.ExecuteNonQuery();
                        }
                    }

                    transaction.Commit();
                    MessageBox.Show("Checkout berhasil!", "Sukses", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.Hide();
                    FormNota fn = new FormNota(idHtrans);
                    fn.ShowDialog();
                    koneksi.closeConn();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Terjadi kesalahan: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("Masukkan metode pembayaran!");
            }
        }
        private void UpdateLabels()
        {
            // Total jumlah item
            int totalItems = 0;

            // Total harga (atau subtotal)
            decimal totalHarga = 0;

            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (!row.IsNewRow)
                {
                    int jumlah = Convert.ToInt32(row.Cells["stok"].Value);
                    decimal subtotal = Convert.ToDecimal(row.Cells["subtotal"].Value);

                    totalItems += jumlah;
                    totalHarga += subtotal;
                }
            }

            // Tampilkan hasilnya di label
            HargaDiskon.Text = $"Rp {totalHarga:N0}";
        }



        private void checkout_Load(object sender, EventArgs e)
        {

        }

        string idMember;
        int jenis_member;

        private void button1_Click(object sender, EventArgs e)
        {
            koneksi.closeConn();
            Member m = new Member();
            m.ShowDialog();
            if(m.jenis_member != 0)
            {
                idMember = m.idMember;
                labelNomorID.Text = idMember;
                labelNomorID.Visible = true;
                label6.Visible = true;
                jenis_member = m.jenis_member;
                cekMember();
            }
        }

        private void cekMember()
        {
                string query = "SELECT * From jenis_member WHERE id = @id";
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@id", jenis_member);

                try
                {

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            // Ambil nilai dari kolom lifetime
                            int lifetime = Convert.ToInt32(reader["lifetime"]);

                            if (lifetime == 1)
                            {
                                diskon = (totalPrice * 5)/100;
                                LabelDiskon.Visible = true;
                                HargaDiskon.Text = $"Rp {diskon:N0}";
                                HargaDiskon.Visible = true;
                                labelGrandtotal.Text = $"Rp {(totalPrice + pajak - diskon):N0}";
                                diskonmember = diskon;
                                finalDiscounts = CalculateFinalDiscounts(productIds, jenis_member);
                        }
                            else
                            {
                                DateTime expiredDate = Convert.ToDateTime(reader["expired_date"]);
                                if (expiredDate < DateTime.Now)
                                {
                                    Console.WriteLine("Member ini bukan Lifetime dan sudah melewati tanggal kedaluwarsa.");
                                }
                                else
                                {
                                    Console.WriteLine("Member ini bukan Lifetime dan masih aktif.");
                                }
                            }
                        }
                        else
                        {
                            Console.WriteLine("Member tidak ditemukan.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Terjadi kesalahan: {ex.Message}");
                }
            
        }

        private List<Tuple<int, decimal>> ApplyPromo(List<Tuple<int, int>> productIds)
        {
            List<Tuple<int, decimal>> discounts = new List<Tuple<int, decimal>>();

            string promoQuery = @"
        SELECT pr.id_rule, pr.tipe_target, pr.id_target, pr.diskon_persen
        FROM promo p
        JOIN promo_rules pr ON p.id_promo = pr.id_promo
        WHERE p.status = 'active'";

            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                int quantity = product.Item2;

                string productQuery = @"
            SELECT p.id_produk, p.kategori, p.id_merk, p.harga
            FROM produk p
            WHERE p.id_produk = @ProductId";

                decimal productPrice = 0;
                int productCategoryId = 0;
                int productBrandId = 0;

                using (MySqlCommand cmd = new MySqlCommand(productQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductId", idProduk);

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            productPrice = reader.GetDecimal("harga");
                            productCategoryId = reader.GetInt32("kategori");
                            productBrandId = reader.GetInt32("id_merk");
                        }
                    }
                }

                decimal bestDiscount = 0;

                using (MySqlCommand promoCmd = new MySqlCommand(promoQuery, conn))
                {
                    using (MySqlDataReader promoReader = promoCmd.ExecuteReader())
                    {
                        while (promoReader.Read())
                        {
                            decimal applicableDiscount = 0;
                            string promoType = promoReader.GetString("tipe_target");
                            int idTarget = promoReader.GetInt32("id_target");

                            if (promoType == "kategori" && productCategoryId == idTarget)
                            {
                                applicableDiscount = promoReader.GetDecimal("diskon_persen");

                            }
                            else if (promoType == "merk" && productBrandId == idTarget)
                            {
                                applicableDiscount = promoReader.GetDecimal("diskon_persen");
                            }
                            else if (promoType == "produk" && idProduk == idTarget)
                            {
                                applicableDiscount = promoReader.GetDecimal("diskon_persen");
                            }

                            if (applicableDiscount > bestDiscount)
                            {
                                bestDiscount = applicableDiscount;
                            }
                            diskonpromo = applicableDiscount;
                        }
                    }
                }

                if (bestDiscount > 0)
                {
                    decimal discountAmount = (bestDiscount * productPrice * quantity) / 100;
                    discounts.Add(Tuple.Create(idProduk, discountAmount));
                }
            }

            return discounts;
        }

        private List<Tuple<int, decimal>> ApplyMemberDiscount(List<Tuple<int, int>> productIds, int idJenisMember)
        {
            List<Tuple<int, decimal>> discounts = new List<Tuple<int, decimal>>();

            // Query untuk mendapatkan aturan diskon member
            string discountQuery = @"
        SELECT mdr.id_target, mdr.tipe_target, mdr.diskon_persen
        FROM member_discount_rules mdr
        JOIN jenis_member jm ON mdr.id_jenis_member = jm.id
        WHERE jm.id = @idJenisMember AND 
              (jm.lifetime = 1 OR jm.expired_date >= @currentDate)";

            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                int quantity = product.Item2;

                // Query untuk mendapatkan detail produk
                string productQuery = @"
            SELECT p.id_produk, p.kategori, p.id_merk, p.harga
            FROM produk p
            WHERE p.id_produk = @ProductId";

                decimal productPrice = 0;
                int productCategoryId = 0;
                int productBrandId = 0;

                using (MySqlCommand cmd = new MySqlCommand(productQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductId", idProduk);

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            productPrice = reader.GetDecimal("harga");
                            productCategoryId = reader.GetInt32("kategori");
                            productBrandId = reader.GetInt32("id_merk");
                        }
                    }
                }

                decimal bestDiscount = 0;

                using (MySqlCommand discountCmd = new MySqlCommand(discountQuery, conn))
                {
                    discountCmd.Parameters.AddWithValue("@idJenisMember", idJenisMember);
                    discountCmd.Parameters.AddWithValue("@currentDate", DateTime.Now);

                    using (MySqlDataReader discountReader = discountCmd.ExecuteReader())
                    {
                        while (discountReader.Read())
                        {
                            decimal applicableDiscount = 0;
                            string discountType = discountReader.GetString("tipe_target");
                            int idTarget = discountReader.GetInt32("id_target");

                            if (discountType == "kategori" && productCategoryId == idTarget)
                            {
                                applicableDiscount = discountReader.GetDecimal("diskon_persen");
                            }
                            else if (discountType == "merk" && productBrandId == idTarget)
                            {
                                applicableDiscount = discountReader.GetDecimal("diskon_persen");
                            }
                            else if (discountType == "produk" && idProduk == idTarget)
                            {
                                applicableDiscount = discountReader.GetDecimal("diskon_persen");
                            }

                            if (applicableDiscount > bestDiscount)
                            {
                                bestDiscount = applicableDiscount;
                            }
                        }
                    }
                }

                if (bestDiscount > 0)
                {
                    decimal discountAmount = (bestDiscount * productPrice * quantity) / 100;
                    discounts.Add(Tuple.Create(idProduk, discountAmount));
                }
            }

            return discounts;
        }


        private List<Tuple<int, decimal>> CalculateFinalDiscounts(List<Tuple<int, int>> productIds, int idJenisMember)
        {
            List<Tuple<int, decimal>> promoDiscounts = ApplyPromo(productIds);
            List<Tuple<int, decimal>> memberDiscounts = ApplyMemberDiscount(productIds, idJenisMember);
            List<Tuple<int, decimal>> finalDiscounts = new List<Tuple<int, decimal>>();
            decimal totalDiscount = 0;

            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                var promoDiscount = promoDiscounts.FirstOrDefault(d => d.Item1 == idProduk);
                var memberDiscount = memberDiscounts.FirstOrDefault(d => d.Item1 == idProduk);

                if (promoDiscount != null)
                {
                    finalDiscounts.Add(promoDiscount);
                    totalDiscount += promoDiscount.Item2;
                }
                else if (memberDiscount != null)
                {
                    finalDiscounts.Add(memberDiscount);
                    totalDiscount += memberDiscount.Item2;
                }
            }

            // Update the total discount
            diskon = totalDiscount;

            // Update the UI
            LabelDiskon.Visible = true;
            HargaDiskon.Text = $"Rp {diskon:N0}";
            HargaDiskon.Visible = true;
            grandtotal = grandtotal - diskon;
            labelGrandtotal.Text = $"Rp {grandtotal:N0}";
            // Update all totals
            Updatesum();

            return finalDiscounts;
        }
        private List<Tuple<int, decimal>> CalculateDynamicDiscounts(List<Tuple<int, int>> productIds, int idJenisMember)
        {
            // Diskon akhir untuk produk (idProduk, totalDiskon)
            var finalDiscounts = new Dictionary<int, decimal>();

            // Variabel untuk menyimpan total diskon
            decimal totalDiscount = 0;

            // Dapatkan diskon dari promo
            List<Tuple<int, decimal>> promoDiscounts = ApplyPromo(productIds);

            // Perbarui diskon akhir dengan diskon promo
            foreach (var promo in promoDiscounts)
            {
                int idProduk = promo.Item1;
                decimal discount = promo.Item2;

                // Tambahkan atau perbarui diskon di finalDiscounts
                if (!finalDiscounts.ContainsKey(idProduk))
                {
                    finalDiscounts[idProduk] = 0;
                }

                // Promo memiliki prioritas tinggi, langsung tambahkan
                finalDiscounts[idProduk] = discount;
                totalDiscount += discount;
            }

            // Dapatkan diskon dari member
            List<Tuple<int, decimal>> memberDiscounts = ApplyMemberDiscount(productIds, idJenisMember);

            // Perbarui diskon akhir dengan diskon member jika belum ada diskon promo
            foreach (var member in memberDiscounts)
            {
                int idProduk = member.Item1;
                decimal discount = member.Item2;

                // Jika tidak ada diskon promo atau aturan bisnis mengizinkan kombinasi diskon
                if (!finalDiscounts.ContainsKey(idProduk))
                {
                    finalDiscounts[idProduk] = discount;
                    totalDiscount += discount;
                }
                else
                {
                    // Contoh aturan: tambahkan diskon jika diskon member > diskon promo
                    if (discount > finalDiscounts[idProduk])
                    {
                        totalDiscount -= finalDiscounts[idProduk]; // Kurangi diskon lama
                        finalDiscounts[idProduk] = discount;
                        totalDiscount += discount;
                    }
                }
            }

            // Jika ada diskon, perbarui label dan variabel diskon
            if (totalDiscount > 0)
            {
                diskon = totalDiscount;

                // Update tampilan
                LabelDiskon.Visible = true;
                HargaDiskon.Text = $"Rp {diskon:N0}";
                HargaDiskon.Visible = true;
                labelGrandtotal.Text = $"Rp {(totalPrice + pajak - diskon):N0}";
            }
            else
            {
                // Jika tidak ada diskon, sembunyikan label
                LabelDiskon.Visible = false;
                HargaDiskon.Visible = false;
            }

            // Konversi ke List<Tuple<int, decimal>> untuk hasil akhir
            return finalDiscounts.Select(kv => Tuple.Create(kv.Key, kv.Value)).ToList();
        }
    }

}


