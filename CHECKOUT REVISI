using System;
using System.Data;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

namespace Manager
{
    public partial class checkout : Form
    {
        cashier cash;
        MySqlConnection conn = koneksi.getConn();
        decimal diskonPromo = 0;
        decimal diskonMember = 0;
        decimal totalDiskon = 0;
        string name;
        int idpegawai;
        List<Tuple<int, decimal>> promoDiscounts;
        List<Tuple<int, decimal>> memberDiscounts;
        List<Tuple<int, int>> productIds;

        public checkout(cashier cash, List<Tuple<int, int>> idProduk, string name, int idpegawai)
        {
            InitializeComponent();
            this.idpegawai = idpegawai;
            this.cash = cash;
            this.name = name;
            productIds = idProduk;
            PopulateDataGridView(idProduk);
            // Apply promo discounts immediately
            promoDiscounts = ApplyPromo(idProduk);
            Updatesum();
            LoadPaymentMethods();
            buttondefault(btncheckout);
            buttondefault(btnedit);
        }


        //------------default ---------------
        private void buttondefault(Button temp)
        {
            temp.FlatStyle = FlatStyle.Flat;
            temp.FlatAppearance.BorderSize = 0;
        }

        private void LoadPaymentMethods()
        {
            string query = "SELECT id_metode, nama_pembayaran FROM pembayaran";


            try
            {

                using (MySqlCommand command = new MySqlCommand(query, conn))
                {
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        boxpembayaran.Items.Clear();

                        while (reader.Read())
                        {
                            string paymentName = reader["nama_pembayaran"].ToString();
                            boxpembayaran.Items.Add(paymentName);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error saat mengambil data metode pembayaran: " + ex.Message,
                    "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        //------------properties action-----------------
        private void btnedit_Click(object sender, EventArgs e)
        {
            this.Hide();
            cash.Show();
        }

        //--------function-------------
        private void PopulateDataGridView(List<Tuple<int, int>> productIds)
        {

            string query = @"
        SELECT 
            p.id_produk,
            p.nama_produk,
            m.nama_merk,
            k.nama_kategori,
            p.harga
        FROM produk p
        JOIN merk m ON p.id_merk = m.id_merk
        JOIN kategori k ON p.kategori = k.id_kategori
        WHERE p.id_produk = @ProductId";

            DataTable dbProducts = new DataTable();

            dbProducts.Columns.Add("id_produk", typeof(int));
            dbProducts.Columns.Add("nama_produk", typeof(string));
            dbProducts.Columns.Add("nama_merk", typeof(string));
            dbProducts.Columns.Add("nama_kategori", typeof(string));
            dbProducts.Columns.Add("harga", typeof(decimal));
            dbProducts.Columns.Add("stok", typeof(int));
            dbProducts.Columns.Add("subtotal", typeof(decimal));

            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                int quantity = product.Item2;

                using (MySqlCommand command = new MySqlCommand(query, conn))
                {
                    command.Parameters.AddWithValue("@ProductId", idProduk);

                    try
                    {
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {
                                    DataRow dr = dbProducts.NewRow();
                                    dr["id_produk"] = reader["id_produk"];
                                    dr["nama_produk"] = reader["nama_produk"];
                                    dr["nama_merk"] = reader["nama_merk"];
                                    dr["nama_kategori"] = reader["nama_kategori"];
                                    dr["harga"] = reader["harga"];
                                    dr["stok"] = quantity;
                                    dr["subtotal"] = quantity * Convert.ToDecimal(reader["harga"]);

                                    dbProducts.Rows.Add(dr);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error saat mengambil data produk: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            dataGridView1.DataSource = dbProducts;


        }
        int totalProducts = 0;
        int totalQuantity = 0;
        decimal grandtotal = 0;
        decimal totalPrice = 0;
        decimal pajak = 0;
        private void UpdateSum()
        {
            totalProducts = 0;
            totalQuantity = 0;
            totalPrice = 0;

            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (!row.IsNewRow)
                {
                    totalProducts++;
                    int quantity = Convert.ToInt32(row.Cells["stok"].Value ?? 0);
                    decimal subtotal = Convert.ToDecimal(row.Cells["subtotal"].Value ?? 0);

                    totalQuantity += quantity;
                    totalPrice += subtotal;
                }
            }
            pajak = ((totalPrice - totalDiskon) * 11) / 100;
            grandtotal = totalPrice - totalDiskon + pajak;

            totalproduk.Text = $"Total Products: {totalProducts}";
            totalquantity.Text = $"Total Quantity: {totalQuantity}";
            labelSubtotal.Text = $"Rp {totalPrice:N0}";
            labelPajak.Text = $"Rp {pajak:N0}";
            labelGrandtotal.Text = $"Rp {grandtotal:N0}";
        }
        private void Updatesum()
        {
            totalProducts = 0;
            totalQuantity = 0;
            totalPrice = 0;

            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (!row.IsNewRow)
                {
                    totalProducts++;
                    int quantity = Convert.ToInt32(row.Cells["stok"].Value ?? 0);
                    decimal subtotal = Convert.ToDecimal(row.Cells["subtotal"].Value ?? 0);

                    totalQuantity += quantity;
                    totalPrice += subtotal;
                }
            }

            pajak = ((totalPrice - totalDiskon) * 11) / 100;
            grandtotal = totalPrice - totalDiskon + pajak;

            totalproduk.Text = $"Total Products: {totalProducts}";
            totalquantity.Text = $"Total Quantity: {totalQuantity}";
            labelSubtotal.Text = $"Rp {totalPrice:N0}";
            labelPajak.Text = $"Rp {pajak:N0}";
            labelGrandtotal.Text = $"Rp {grandtotal:N0}";
        }


        int idHtrans;
        private void btncheckout_Click(object sender, EventArgs e)
        {
            if (boxpembayaran.SelectedIndex > -1)
            {
                string totalPriceText = labelGrandtotal.Text.Replace("Rp", "").Replace(",", "").Replace(" ", "").Trim();

                if (!decimal.TryParse(totalPriceText, out decimal grandtotal))
                {
                    MessageBox.Show(totalPriceText, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                try
                {
                    MySqlTransaction transaction = conn.BeginTransaction();

                    List<Tuple<int, int>> productIds = new List<Tuple<int, int>>();
                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        if (!row.IsNewRow)
                        {
                            int idProduk = Convert.ToInt32(row.Cells["id_produk"].Value);
                            int jumlah = Convert.ToInt32(row.Cells["stok"].Value);
                            productIds.Add(Tuple.Create(idProduk, jumlah));
                        }
                    }

                    // Calculate final discounts
                    string htransQuery = @"
            INSERT INTO htrans (id_pegawai, tanggal_transaksi, subtotal, grandtotal, pajak, metode_pembayaran)
            VALUES (@idPegawai, @tanggalTransaksi, @subtotal, @grandtotal, @pajak, @metodePembayaran);
            SELECT LAST_INSERT_ID();";

                    MySqlCommand htransCommand = new MySqlCommand(htransQuery, conn, transaction);
                    htransCommand.Parameters.AddWithValue("@idPegawai", idpegawai);
                    htransCommand.Parameters.AddWithValue("@tanggalTransaksi", DateTime.Now);
                    htransCommand.Parameters.AddWithValue("@subtotal", totalPrice); // Original subtotal before discounts
                    htransCommand.Parameters.AddWithValue("@grandtotal", grandtotal); // Final total after discounts and tax
                    htransCommand.Parameters.AddWithValue("@pajak", pajak);
                    htransCommand.Parameters.AddWithValue("@metodePembayaran", boxpembayaran.SelectedIndex + 1);

                    idHtrans = Convert.ToInt32(htransCommand.ExecuteScalar());

                    string updateStockQuery = @"
            UPDATE produk 
            SET stok = stok - @jumlah 
            WHERE id_produk = @idProduk;";

                    string dtransQuery = @"
            INSERT INTO dtrans (id_htrans, id_produk, nama_produk, jumlah, subtotal, diskon)
            VALUES (@idHtrans, @idProduk, @namaProduk, @jumlah, @subtotal, @diskon);";

                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        if (!row.IsNewRow)
                        {
                            int idProduk = Convert.ToInt32(row.Cells["id_produk"].Value);
                            decimal promoDiskon = promoDiscounts.FirstOrDefault(d => d.Item1 == idProduk)?.Item2 ?? 0;
                            decimal memberDiskon = memberDiscounts?.FirstOrDefault(d => d.Item1 == idProduk)?.Item2 ?? 0;

                            // Compare member and promo discount and apply the better one
                            decimal bestDiscount = Math.Max(promoDiskon, memberDiskon); // Select the better discount

                            // Calculate the discount for this product
                            decimal productSubtotal = Convert.ToDecimal(row.Cells["subtotal"].Value);
                            decimal productStock = Convert.ToDecimal(row.Cells["stok"].Value);
                            MessageBox.Show(bestDiscount.ToString());
                            decimal discountAmount = (bestDiscount * productStock) ;

                            // Now, we insert the product-specific discount into the dtrans table
                            MySqlCommand dtransCommand = new MySqlCommand(dtransQuery, conn, transaction);
                            dtransCommand.Parameters.AddWithValue("@idHtrans", idHtrans);
                            dtransCommand.Parameters.AddWithValue("@idProduk", idProduk);
                            dtransCommand.Parameters.AddWithValue("@namaProduk", row.Cells["nama_produk"].Value);
                            dtransCommand.Parameters.AddWithValue("@jumlah", row.Cells["stok"].Value);
                            dtransCommand.Parameters.AddWithValue("@subtotal", productSubtotal);
                            dtransCommand.Parameters.AddWithValue("@diskon", discountAmount); // Store the discount for this specific product

                            dtransCommand.ExecuteNonQuery();

                            // Update stock after the transaction
                            MySqlCommand updateStockCommand = new MySqlCommand(updateStockQuery, conn, transaction);
                            updateStockCommand.Parameters.AddWithValue("@jumlah", row.Cells["stok"].Value);
                            updateStockCommand.Parameters.AddWithValue("@idProduk", idProduk);

                            updateStockCommand.ExecuteNonQuery();
                        }
                    }

                    transaction.Commit();
                    MessageBox.Show("Checkout berhasil!", "Sukses", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.Hide();
                    FormNota fn = new FormNota(idHtrans);
                    fn.ShowDialog();
                    koneksi.closeConn();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Terjadi kesalahan: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("Masukkan metode pembayaran!");
            }
        }



        private void UpdateLabels()
        {
            // Total jumlah item
            int totalItems = 0;

            // Total harga (atau subtotal)
            decimal totalHarga = 0;

            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (!row.IsNewRow)
                {
                    int jumlah = Convert.ToInt32(row.Cells["stok"].Value);
                    decimal subtotal = Convert.ToDecimal(row.Cells["subtotal"].Value);

                    totalItems += jumlah;
                    totalHarga += subtotal;
                }
            }

            // Tampilkan hasilnya di label
            HargaDiskon.Text = $"Rp {totalHarga:N0}";
        }



        private void checkout_Load(object sender, EventArgs e)
        {

        }

        string idMember;
        int jenis_member;

        private void button1_Click(object sender, EventArgs e)
        {
            koneksi.closeConn();
            Member m = new Member();
            m.ShowDialog();
            if (m.jenis_member != 0)
            {
                idMember = m.idMember;
                labelNomorID.Text = idMember;
                labelNomorID.Visible = true;
                label6.Visible = true;
                jenis_member = m.jenis_member;

                // Apply member discount after member selection
                memberDiscounts = ApplyMemberDiscount(productIds, jenis_member);
            }
        }

        private void cekMember()
        {
            string query = "SELECT * From jenis_member WHERE id = @id";
            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@id", jenis_member);

            try
            {

                using (MySqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        int lifetime = Convert.ToInt32(reader["lifetime"]);

                        // Apply member discounts
                        memberDiscounts = ApplyMemberDiscount(productIds, jenis_member);

                        if (lifetime == 1)
                        {
                            // For lifetime members, calculate additional 5% discount
                            decimal additionalDiscount = (totalPrice * 5) / 100;
                            diskonMember += additionalDiscount;
                            totalDiskon = diskonPromo + diskonMember;

                            // Update UI
                            LabelDiskon.Visible = true;
                            HargaDiskon.Text = $"Rp {totalDiskon:N0}";
                            HargaDiskon.Visible = true;
                            labelGrandtotal.Text = $"Rp {(totalPrice + pajak - totalDiskon):N0}";
                        }
                        else
                        {
                            DateTime expiredDate = Convert.ToDateTime(reader["expired_date"]);
                            if (expiredDate < DateTime.Now)
                            {
                                MessageBox.Show("Member ini bukan Lifetime dan sudah melewati tanggal kedaluwarsa.");
                                // Reset member discounts if expired
                                memberDiscounts = new List<Tuple<int, decimal>>();
                                diskonMember = 0;
                                totalDiskon = diskonPromo;
                            }
                            else
                            {
                                MessageBox.Show("Member ini bukan Lifetime dan masih aktif.");
                                // Keep the calculated member discounts
                            }
                        }

                        // Update all calculations
                        Updatesum();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Terjadi kesalahan: {ex.Message}");
            }

        }

        private List<Tuple<int, decimal>> ApplyPromo(List<Tuple<int, int>> productIds)
        {
            List<Tuple<int, decimal>> discounts = new List<Tuple<int, decimal>>();
            diskonPromo = 0; // Reset promo discount

            string promoQuery = @"
    SELECT pr.id_rule, pr.tipe_target, pr.id_target, pr.diskon_persen
    FROM promo p
    JOIN promo_rules pr ON p.id_promo = pr.id_promo
    WHERE p.status = 'active'";

            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                int quantity = product.Item2;
                decimal totalPromoDiscount = 0;

                string productQuery = @"
        SELECT p.id_produk, p.kategori, p.id_merk, p.harga
        FROM produk p
        WHERE p.id_produk = @ProductId";

                decimal productPrice = 0;
                int productCategoryId = 0;
                int productBrandId = 0;

                using (MySqlCommand cmd = new MySqlCommand(productQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductId", idProduk);
                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            productPrice = reader.GetDecimal("harga");
                            productCategoryId = reader.GetInt32("kategori");
                            productBrandId = reader.GetInt32("id_merk");
                        }
                    }
                }

                decimal maxPromoDiscount = 0; // Variable to store the maximum discount found

                using (MySqlCommand promoCmd = new MySqlCommand(promoQuery, conn))
                {
                    using (MySqlDataReader promoReader = promoCmd.ExecuteReader())
                    {
                        while (promoReader.Read())
                        {
                            string promoType = promoReader.GetString("tipe_target");
                            int idTarget = promoReader.GetInt32("id_target");
                            decimal discountPercent = promoReader.GetDecimal("diskon_persen");

                            // Check if the promo is applicable to this product
                            if ((promoType == "kategori" && productCategoryId == idTarget) ||
                                (promoType == "merk" && productBrandId == idTarget) ||
                                (promoType == "produk" && idProduk == idTarget))
                            {
                                // Only update if we found a larger discount
                                if (discountPercent > maxPromoDiscount)
                                {
                                    maxPromoDiscount = discountPercent;
                                }
                            }
                        }
                    }
                }

                // If a promo discount was applied (maxPromoDiscount > 0), calculate the discount amount
                if (maxPromoDiscount > 0)
                {
                    decimal discountAmount = (maxPromoDiscount * productPrice * quantity) / 100;
                    discounts.Add(Tuple.Create(idProduk, discountAmount));
                    diskonPromo += discountAmount;
                }
            }

            // Update total discount and UI
            totalDiskon = diskonPromo;
            UpdateDiscountDisplay();
            return discounts;
        }



        private void UpdateDiscountDisplay()
        {
            LabelDiskon.Visible = totalDiskon > 0;
            HargaDiskon.Visible = totalDiskon > 0;
            HargaDiskon.Text = $"Rp {totalDiskon:N0}";
            Updatesum();
        }
        int idTarget;
        string discountType;
        private List<Tuple<int, decimal>> ApplyMemberDiscount(List<Tuple<int, int>> productIds, int idJenisMember)
        {
            List<Tuple<int, decimal>> discounts = new List<Tuple<int, decimal>>();
            diskonMember = 0; // Reset member discount
            decimal diskonPromo = 0; // Reset promo discount

            // Query to get the status of the member type
            string jenisMemberStatusQuery = @"
SELECT status
FROM jenis_member
WHERE id = @idJenisMember";

            string discountQuery = @"
SELECT mdr.id_target, mdr.tipe_target, mdr.diskon_persen
FROM member_discount_rules mdr
JOIN jenis_member jm ON mdr.id_jenis_member = jm.id
WHERE jm.id = @idJenisMember AND jm.status = 'Active'";

            string promoQuery = @"
SELECT pr.id_rule, pr.tipe_target, pr.id_target, pr.diskon_persen
FROM promo p
JOIN promo_rules pr ON p.id_promo = pr.id_promo
WHERE p.status = 'active'";

            // Check the status of the member type
            string statusJenisMember = "";
            using (MySqlCommand statusCmd = new MySqlCommand(jenisMemberStatusQuery, conn))
            {
                statusCmd.Parameters.AddWithValue("@idJenisMember", idJenisMember);
                using (MySqlDataReader statusReader = statusCmd.ExecuteReader())
                {
                    if (statusReader.Read())
                    {
                        statusJenisMember = statusReader.GetString("status");
                    }
                }
            }

            // If the member type status is not "Active", no member discount is applied
            if (statusJenisMember != "Active")
            {
                diskonMember = 0;
                MessageBox.Show("Jenis Member tidak aktif atau expired. Diskon Member tidak dapat diterapkan.");
                return discounts;  // Stop the process if the status is not active
            }

            // Loop through each product
            foreach (var product in productIds)
            {
                int idProduk = product.Item1;
                int quantity = product.Item2;
                decimal totalMemberDiscount = 0;
                decimal totalPromoDiscount = 0;

                string productQuery = @"
SELECT p.id_produk, p.kategori, p.id_merk, p.harga
FROM produk p
WHERE p.id_produk = @ProductId";

                decimal productPrice = 0;
                int productCategoryId = 0;
                int productBrandId = 0;

                // Get product details
                using (MySqlCommand cmd = new MySqlCommand(productQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductId", idProduk);
                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            productPrice = reader.GetDecimal("harga");
                            productCategoryId = reader.GetInt32("kategori");
                            productBrandId = reader.GetInt32("id_merk");
                        }
                    }
                }

                // Apply member discount
                List<decimal> memberDiscounts = new List<decimal>(); // Store all member discounts for comparison
                using (MySqlCommand discountCmd = new MySqlCommand(discountQuery, conn))
                {
                    discountCmd.Parameters.AddWithValue("@idJenisMember", idJenisMember);

                    using (MySqlDataReader discountReader = discountCmd.ExecuteReader())
                    {
                        while (discountReader.Read())
                        {
                            string discountType = discountReader.GetString("tipe_target");
                            int idTarget = discountReader.GetInt32("id_target");
                            decimal discountPercent = discountReader.GetDecimal("diskon_persen");

                            if ((discountType == "kategori" && productCategoryId == idTarget) ||
                                (discountType == "merk" && productBrandId == idTarget) ||
                                (discountType == "produk" && idProduk == idTarget))
                            {
                                memberDiscounts.Add(discountPercent); // Store the discount for comparison
                            }
                        }
                    }
                }

                // Apply promo discount (this part is kept as is, but we're not comparing it with the member discount yet)
                using (MySqlCommand promoCmd = new MySqlCommand(promoQuery, conn))
                {
                    using (MySqlDataReader promoReader = promoCmd.ExecuteReader())
                    {
                        while (promoReader.Read())
                        {
                            string promoType = promoReader.GetString("tipe_target");
                            int idTarget = promoReader.GetInt32("id_target");
                            decimal discountPercent = promoReader.GetDecimal("diskon_persen");

                            if ((promoType == "kategori" && productCategoryId == idTarget) ||
                                (promoType == "merk" && productBrandId == idTarget) ||
                                (promoType == "produk" && idProduk == idTarget))
                            {
                                totalPromoDiscount += discountPercent;
                            }
                        }
                    }
                }

                // Now, compare the member discounts only to get the best one (largest member discount)
                decimal bestMemberDiscount = memberDiscounts.Count > 0 ? memberDiscounts.Max() : 0; // Find the largest member discount

                // Apply the largest member discount or promo discount (whichever is greater)
                decimal bestDiscountPercent = Math.Max(bestMemberDiscount, totalPromoDiscount); // Compare with promo discount

                // If there's a valid discount, calculate the discount amount for this product
                if (bestDiscountPercent > 0)
                {
                    decimal discountAmount = (bestDiscountPercent * productPrice * quantity) / 100;
                    discounts.Add(Tuple.Create(idProduk, discountAmount));

                    // Update the total member discount (if applicable)
                    if (bestDiscountPercent == bestMemberDiscount)
                    {
                        diskonMember += discountAmount;
                    }
                    else
                    {
                        diskonPromo += discountAmount;
                    }
                }
            }

            // Update total discount and UI (if needed)

            totalDiskon = diskonPromo + diskonMember;
            UpdateDiscountDisplay();

            return discounts;
        }








    }
}


